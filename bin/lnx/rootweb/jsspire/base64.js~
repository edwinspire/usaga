/*
 * This file is provided for custom JavaScript logic that your HTML files might need.
 * Maqetta includes this JavaScript file by default within HTML pages authored in Maqetta.
 */
require(["dojo/ready"], function(ready){
     ready(function(){
         // logic that requires that Dojo is fully initialized should go here
//alert("Hola");
// Aqui llamamos a todas las funciones que requieran que dojo se haya cargado antes de funcionar.
sendFormPostgreSQLCnx();
// Carga el formulario cada 3 segundos
setInterval('loadFormPostgreSQLCnx()',10000);

     });
});

// Convierte una cadena en base64
function StringToBase64(textstring){
return dojox.encoding.digests.wordToBase64(dojox.encoding.digests.stringToWord(textstring));
}

// convierte una cadena base64 en una cadena legible
function Base64ToString(base64string){
//return dojox.encoding.digests.wordToString(dojox.encoding.base64.decode(base64string));
return dojox.html.entities.decode(base64string);
}

// Envia el formulario de PostgreSQL
function sendFormPostgreSQLCnx(){
  var formpg = dojo.byId("FormPostgreSQLCnx");

  dojo.connect(formpg, "onsubmit", function(event){
    // Stop the submit event since we want to control form submission.
    dojo.stopEvent(event);

    // The parameters to pass to xhrPost, the form, how to handle it, and the callbacks.
    // Note that there isn't a url passed.  xhrPost will extract the url to call from the form's
    //'action' attribute.  You could also leave off the action attribute and set the url of the xhrPost object
    // either should work.
    var xhrArgs = {
      form: formpg,
      handleAs: "text",
      load: function(data){
alert("Enviado");
///        dojo.byId("response").innerHTML = "Form posted.";
      },
      error: function(error){
        // We'll 404 in the demo, but that's okay.  We don't have a 'postIt' service on the
        // docs server.
alert("Falla");
   //     dojo.byId("response").innerHTML = "Form posted.";
      }
    }
    // Call the asynchronous xhrPost
    var deferred = dojo.xhrPost(xhrArgs);
  });
}


// Carga los datos desde el servido en el formulario PostgreSQL
function loadFormPostgreSQLCnx(){
 // Look up the node we'll stick the text under.

  // The parameters to pass to xhrGet, the url, how to handle it, and the callbacks.
  var xhrArgs = {
    url: "getpostgresconf",
    handleAs: "text",
    load: function(datass){

//alert(datass);

  var data = dojox.xml.DomParser.parse(datass);

x=data.byName('postgres');

var pwd = Base64ToString(x[0].getAttribute("pwd"));
var user = Base64ToString(x[0].getAttribute("user"));
console.debug(Base64ToString(x[0].getAttribute("user")));
console.debug(user);


   dijit.byId('tbxpgPwd').set('value', pwd);
   dijit.byId('tbxpgUser').set('value', user);
   dijit.byId('tbxpgHost').set('value', Base64ToString(x[0].getAttribute("host")));  
   dijit.byId('tbxpgPort').set('value',x[0].getAttribute("port"));  

if(x[0].getAttribute("ssl") == "true"){
   dijit.byId('cbxpgSSL').set('checked', true);
}else{
   dijit.byId('cbxpgSSL').set('checked', false);
}

//alert(x[0].getAttribute("note"));


   dijit.byId('tbxpgDataBase').set('value', Base64ToString(x[0].getAttribute("db")));  
   dijit.byId('tbxpgTimeOut').set('value',x[0].getAttribute("timeout"));    
   dijit.byId('stapgNote').set('value',Base64ToString(x[0].getAttribute("note")));
//   dijit.byId('stapgNote').set('value', "hola\nnueva linea");
//var cadena = "nos vemos\notra linea mamá mañana";

//var enco = StringToBase64(cadena);
//var enco = dojox.encoding.digests.wordToBase64(dojox.encoding.digests.stringToWord(cadena));
//var deco = dojox.encoding.digests.wordToString(enco);
//alert("org: "+cadena+" enco: "+enco+" deco: ");
//console.debug(enco);
//console.debug(Base64ToString(enco));
  
/*
for (i=0;i<x.length;i++)
{
console.debug(x.item(i).attributes[0].name);
console.debug(": ");
console.debug(x.item(i).attributes[0].value);
console.debug("");
}
*/

   


    },
    error: function(error){
//      targetNode.innerHTML = "An unexpected error occurred: " + error;
alert(error);
    }
  }

  // Call the asynchronous xhrGet
  var deferred = dojo.xhrGet(xhrArgs);
}
